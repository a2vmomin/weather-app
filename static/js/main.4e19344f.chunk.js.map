{"version":3,"sources":["components/WeatherForm.js","components/WeatherCard.js","App.js","index.js"],"names":["WeatherForm","props","state","city","handleSubmit","bind","this","ismounted","e","preventDefault","weather","onSubmit","className","htmlFor","id","name","placeholder","value","onChange","setState","target","onBlur","type","React","Component","WeatherCard","countryCode","weatherImage","weatherMain","weatherDesc","maxTemp","minTemp","temp","src","alt","width","height","API_URL","App","useState","cod","setCod","setCity","setCountryCode","setTemp","setMinTemp","setMaxTemp","setWeatherImage","setWeatherDesc","setWeatherMain","unit","setUnit","loading","setLoading","getWeather","cityParam","a","fetch","response","json","data","status","parseInt","sys","country","main","temp_min","temp_max","icon","description","changeUnit","prevValue","useEffect","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4e19344f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass WeatherForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      city: '',\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.ismounted = true;\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.ismounted = false;\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    const { weather } = this.props;\r\n    const { city } = this.state;\r\n    if (this.ismounted) weather(city);\r\n  }\r\n\r\n  render() {\r\n    const { city } = this.state;\r\n    return (\r\n      <form\r\n        onSubmit={this.handleSubmit}\r\n        className=\"flex flex-col justify-center px-8 py-8 bg-white shadow-lg sm:flex-row sm:justify-between rounded-2xl\"\r\n      >\r\n        <label htmlFor=\"city\" className=\"flex-1 mb-4 sm:mb-0\">\r\n          <input\r\n            className=\"w-full px-2 py-2 border-2 border-gray-600 rounded-lg\"\r\n            id=\"city\"\r\n            name=\"city\"\r\n            placeholder=\"City\"\r\n            // autoComplete=\"off\"\r\n            value={city}\r\n            onChange={(e) => this.setState({ city: e.target.value })}\r\n            onBlur={(e) => this.setState({ city: e.target.value })}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className=\"px-2 py-2 font-bold bg-yellow-500 rounded-lg sm:ml-8\">\r\n          Get Weather\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WeatherForm;\r\n","import React from 'react';\r\n\r\nconst WeatherCard = (props) => {\r\n  const {\r\n    city,\r\n    countryCode,\r\n    weatherImage,\r\n    weatherMain,\r\n    weatherDesc,\r\n    maxTemp,\r\n    minTemp,\r\n    temp,\r\n  } = props;\r\n\r\n  // const [time, setTime] = useState(new Date().toLocaleTimeString());\r\n\r\n  // const tick = () => {\r\n  //   setInterval(() => setTime(new Date().toLocaleTimeString()), 1000);\r\n  // };\r\n  // tick();\r\n  return (\r\n    <div className=\"px-8 py-8 mt-8 text-center bg-white shadow-lg rounded-2xl\">\r\n      {/* <p>{time}</p> */}\r\n      <h1 className=\"mb-4 text-3xl font-semibold text-center text-blue-700\">\r\n        {`${city}, ${countryCode}`}\r\n      </h1>\r\n      <h5>\r\n        <img\r\n          className=\"mx-auto\"\r\n          src={weatherImage}\r\n          alt={weatherDesc}\r\n          width=\"100px\"\r\n          height=\"100px\"\r\n        />\r\n        {weatherMain}\r\n      </h5>\r\n      <h1 className=\"text-5xl font-bold\">\r\n        {temp}\r\n        &deg;\r\n      </h1>\r\n      <h3 className=\"text-2xl font-semibold\">\r\n        <span className=\"pr-4\">\r\n          {minTemp}\r\n          &deg;\r\n        </span>\r\n        <span className=\"pl-4\">\r\n          {maxTemp}\r\n          &deg;\r\n        </span>\r\n      </h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import React, { useState, useEffect } from 'react';\n\nimport WeatherForm from './components/WeatherForm';\nimport WeatherCard from './components/WeatherCard';\n\nconst API_KEY = 'ac02dbe7b3b2846c3d10c89c41da53dd';\nconst API_URL = `http://api.openweathermap.org/data/2.5/weather?&appid=${API_KEY}`;\n\nfunction App() {\n  const [cod, setCod] = useState();\n  const [city, setCity] = useState('');\n  const [countryCode, setCountryCode] = useState('');\n  const [temp, setTemp] = useState('');\n  const [minTemp, setMinTemp] = useState('');\n  const [maxTemp, setMaxTemp] = useState('');\n  const [weatherImage, setWeatherImage] = useState('');\n  const [weatherDesc, setWeatherDesc] = useState('');\n  const [weatherMain, setWeatherMain] = useState('');\n  const [unit, setUnit] = useState('metric');\n  const [loading, setLoading] = useState(false);\n\n  const getWeather = async (cityParam) => {\n    setLoading(true);\n    if (cityParam) {\n      const response = await fetch(`${API_URL}&q=${cityParam}&units=${unit}`);\n      const data = await response.json();\n      const status = parseInt(data.cod, 10);\n      if (status === 200) {\n        setCod(status);\n        setCity(data.name);\n        setCountryCode(data.sys.country);\n        setTemp(data.main.temp);\n        setMinTemp(data.main.temp_min);\n        setMaxTemp(data.main.temp_max);\n        setWeatherImage(`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`);\n        setWeatherDesc(data.weather[0].description);\n        setWeatherMain(data.weather[0].main);\n      } else if (status === 400) {\n        setCod(status);\n      } else if (status === 404) {\n        setCod(status);\n      } else {\n        setCod(status);\n      }\n      setLoading(false);\n    } else {\n      setLoading(false);\n      setCod(400);\n    }\n  };\n\n  const changeUnit = async () => {\n    setUnit((prevValue) => {\n      let newValue;\n      if (prevValue === 'metric') {\n        newValue = 'imperial';\n      } else {\n        newValue = 'metric';\n      }\n      return newValue;\n    });\n  };\n\n  useEffect(async () => {\n    if (city) {\n      await getWeather(city);\n    }\n  }, [unit]);\n\n  return (\n    <div>\n      <div className=\"container max-w-screen-sm px-4 mx-auto\">\n        <button\n          type=\"button\"\n          className=\"text-white\"\n          value={unit}\n          onClick={() => {\n            changeUnit();\n          }}\n        >\n          Show whether in {unit && unit === 'metric' ? 'imperial' : 'metric'} unit\n        </button>\n      </div>\n      <div className=\"container max-w-screen-sm px-4 mx-auto my-16 text-gray-800 App md:my-32\">\n        <WeatherForm weather={getWeather} />\n        {cod === 200 && !loading && (\n          <WeatherCard\n            city={city}\n            countryCode={countryCode}\n            minTemp={minTemp}\n            maxTemp={maxTemp}\n            temp={temp}\n            weatherImage={weatherImage}\n            weatherMain={weatherMain}\n            weatherDesc={weatherDesc}\n          />\n        )}\n        {loading && (\n          <div className=\"py-8 mt-8 text-center bg-white shadow-lg rounded-2xl\">\n            <h1 className=\"text-3xl font-semibold text-center text-blue-700\">Loading...</h1>\n          </div>\n        )}\n        {cod === 400 && (\n          <div className=\"py-8 mt-8 text-center bg-white shadow-lg rounded-2xl\">\n            <h1 className=\"text-3xl font-semibold text-center text-blue-700\">\n              Please enter a city\n            </h1>\n          </div>\n        )}\n        {cod === 404 && (\n          <div className=\"py-8 mt-8 text-center bg-white shadow-lg rounded-2xl\">\n            <h1 className=\"text-3xl font-semibold text-center text-blue-700\">City not found</h1>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}